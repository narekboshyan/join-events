generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User table with complete profile information
model users {
  id String @id @default(cuid())

  // Authentication & Basic Info
  email             String    @unique
  username          String    @unique
  password_hash     String? // Optional for OAuth-only users
  email_verified    Boolean   @default(false)
  email_verified_at DateTime?

  // Personal Information
  first_name    String
  last_name     String
  date_of_birth DateTime?
  phone         String?
  age           Int? // Can be calculated from date_of_birth
  bio           String?   @db.Text

  // Address Information
  country      String?
  city         String?
  state        String?
  postal_code  String?
  full_address String? @db.Text

  // Current location for events
  location String?

  // Account Status & Metadata
  is_active         Boolean @default(true)
  is_verified       Boolean @default(false) // For verified accounts
  profile_completed Boolean @default(false)
  privacy_settings  Json? // Store privacy preferences as JSON

  // Timestamps
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  last_login_at DateTime?

  // Relations
  oauth_accounts      oauth_accounts[]
  attachments         attachments[]
  user_hobbies        user_hobbies[]
  user_activities     user_activities[]
  user_entertainments user_entertainments[]

  // Indexes for better performance
  @@index([email])
  @@index([username])
  @@index([country, city])
  @@index([created_at])
  @@map("users")
}

// Attachments table for scalable file management
model attachments {
  id String @id @default(cuid())

  // File Information
  filename      String
  original_name String
  file_path     String
  file_url      String?
  file_size     BigInt // Size in bytes
  mime_type     String
  file_type     String // "image", "video", "audio", "document", etc.

  // Metadata
  width       Int? // For images/videos
  height      Int? // For images/videos
  duration    Int? // For videos/audio in seconds
  alt_text    String? // For accessibility
  description String? @db.Text

  // Relations & Context
  user_id          String
  entity_type      String // "user_avatar", "event_cover", "chat_message", etc.
  entity_id        String? // ID of the related entity
  attachment_order Int? // For ordering multiple attachments

  // Status
  is_processed Boolean @default(false) // For image/video processing
  is_public    Boolean @default(false)
  is_deleted   Boolean @default(false) // Soft delete

  // Timestamps
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relationships
  user users @relation(fields: [user_id], references: [id], onDelete: Cascade)

  // Indexes
  @@index([user_id])
  @@index([entity_type, entity_id])
  @@index([file_type])
  @@index([created_at])
  @@map("attachments")
}

// Master hobbies table
model hobbies {
  id String @id @default(cuid())

  name          String  @unique
  slug          String  @unique
  description   String? @db.Text
  category      String? // "sports", "arts", "technology", "outdoor", etc.
  icon_url      String?
  is_active     Boolean @default(true)
  display_order Int?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  user_hobbies user_hobbies[]

  @@index([category])
  @@index([is_active])
  @@map("hobbies")
}

// User hobbies junction table
model user_hobbies {
  id String @id @default(cuid())

  user_id  String
  hobby_id String

  // Additional data
  skill_level      String? // "beginner", "intermediate", "advanced", "expert"
  years_experience Int?
  is_favorite      Boolean @default(false)
  interest_level   Int? // 1-10 scale

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relationships
  user  users   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  hobby hobbies @relation(fields: [hobby_id], references: [id], onDelete: Cascade)

  // Unique constraint
  @@unique([user_id, hobby_id])
  @@index([user_id])
  @@index([hobby_id])
  @@map("user_hobbies")
}

// Activities table (what users like to do)
model activities {
  id String @id @default(cuid())

  name          String  @unique
  slug          String  @unique
  description   String? @db.Text
  category      String? // "social", "solo", "group", "outdoor", "indoor", etc.
  icon_url      String?
  is_active     Boolean @default(true)
  display_order Int?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  user_activities user_activities[]

  @@index([category])
  @@index([is_active])
  @@map("activities")
}

// User activities junction table
model user_activities {
  id String @id @default(cuid())

  user_id     String
  activity_id String

  // Additional data
  frequency        String? // "daily", "weekly", "monthly", "occasionally"
  preference_level Int? // 1-10 scale
  is_favorite      Boolean @default(false)
  notes            String? @db.Text

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relationships
  user     users      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  activity activities @relation(fields: [activity_id], references: [id], onDelete: Cascade)

  // Unique constraint
  @@unique([user_id, activity_id])
  @@index([user_id])
  @@index([activity_id])
  @@map("user_activities")
}

// Entertainment preferences table
model entertainments {
  id String @id @default(cuid())

  name          String  @unique
  slug          String  @unique
  description   String? @db.Text
  category      String? // "music", "movies", "games", "books", "comedy", etc.
  icon_url      String?
  is_active     Boolean @default(true)
  display_order Int?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  user_entertainments user_entertainments[]

  @@index([category])
  @@index([is_active])
  @@map("entertainments")
}

// User entertainment preferences junction table
model user_entertainments {
  id String @id @default(cuid())

  user_id          String
  entertainment_id String

  // Additional data
  preference_level  Int? // 1-10 scale
  is_favorite       Boolean  @default(false)
  genre_preferences String[] // For specific genres within entertainment type
  notes             String?  @db.Text

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relationships
  user          users          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  entertainment entertainments @relation(fields: [entertainment_id], references: [id], onDelete: Cascade)

  // Unique constraint
  @@unique([user_id, entertainment_id])
  @@index([user_id])
  @@index([entertainment_id])
  @@map("user_entertainments")
}

// Optional: Separate table for OAuth providers if you want more detailed tracking
model oauth_accounts {
  id                String    @id @default(cuid())
  user_id           String
  provider          String // "google", "facebook", "twitter", etc.
  provider_id       String // The ID from the OAuth provider
  provider_email    String?
  provider_username String?
  access_token      String? // Store encrypted in production
  refresh_token     String? // Store encrypted in production
  expires_at        DateTime?
  token_type        String?
  scope             String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user users @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([provider, provider_id])
  @@index([user_id])
  @@index([provider])
  @@map("oauth_accounts")
}
